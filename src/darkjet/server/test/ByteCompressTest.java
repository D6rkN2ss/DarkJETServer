package darkjet.server.test;

import static org.junit.Assert.*;

import org.junit.Test;

import darkjet.server.Utils;
import darkjet.server.level.chunk.Chunk;
import darkjet.server.level.chunk.generator.FlatChunkGenerator;

import java.io.File;
import java.nio.ByteBuffer;

public class ByteCompressTest {
	public static final byte[] FLATREPEAT = new byte[]{0x07, 0x03, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	public static final byte[] BIOMECOLOR = new byte[]{0x00 ,(byte) 0x85 ,(byte) 0xb2 ,0x4a};
	
	@Test
	public void test() throws Exception {
		byte[] t1 = new byte[]{0x00, (byte) 0xff, (byte) 0xbb};
		byte[] t2 = new byte[]{0x40, (byte) 0xff, (byte) 0xab};
		byte[] t = new byte[]{0x00, (byte)0xff, (byte) 0xbb, 0x40, (byte) 0xff, (byte) 0xab};
		
		byte[] c1 = Utils.decompressByte( Utils.compressByte(t) );
		byte[] c2 = Utils.decompressByte( Utils.compressByte(t1, t2) );
		assertArrayEquals(c1, c2);
		
		final byte[] SUPERFLAT;
		
		ByteBuffer builder = ByteBuffer.allocate( 0x8000 + 0x4000 + 0x4000 + 0x4000 + 0x100 + 0x400 );
		int last = 0x8000;
		while( builder.position() != last ) {
			builder.put( FLATREPEAT );
		}
		last += 0x4000 + 0x4000 + 0x4000;
		while( builder.position() != last ) {
			builder.put((byte) 0x00);
		}
		last += 0x100;
		while( builder.position() != last ) {
			builder.put((byte) 0xff);
		}
		last += 0x400;
		while( builder.position() != last ) {
			builder.put(BIOMECOLOR);
		}
		SUPERFLAT = builder.array();
		
		Chunk chunk = new Chunk(4, 4);
		FlatChunkGenerator generator = new FlatChunkGenerator();
		generator.generateChunk(chunk);
		
		byte[] p1 = Utils.compressByte( Utils.LInt(4), Utils.LInt(4), SUPERFLAT );
		byte[] p2 = chunk.getCompressed();
		byte[] p3 = Utils.FiletoByteArray( new File(".", "level/world/chunks/4_4") );
		assertArrayEquals(p1, p2);
		assertArrayEquals(p1, p3);
	}

}
